openapi: 3.0.3
info:
  title: 'The Forge API Documentation'
  description: 'The greatest resource available for Single Player Tarkov modifications. Where modding legends are made. Discover powerful tools, expert-written guides, and exclusive mods. Craft your vision. Transform the game.'
  version: 1.0.0
servers:
  -
    url: 'https://forge.sp-tarkov.com'
tags:
  -
    name: Authentication
    description: ''
  -
    name: Mods
    description: ''
  -
    name: Users
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can generate your own API token by logging into The Forge, clicking your profile picture, and clicking <b>API Tokens</b>.'
security:
  -
    default: []
paths:
  /api/login:
    post:
      summary: Login
      operationId: login
      description: "Authenticates the user and returns a read-only API token. This API token can then be saved and used for future\nrequests that require authentication. <aside class=\"warning\">This method is made available for mod authors to\nincorporate into their mods so that users can easily authenticate using their own API token. For typical API use,\nyou should log into the website, create an API token, and use that token for your API requests.</aside>"
      parameters: []
      responses:
        200:
          description: 'Authenticated successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: authenticated
                  data:
                    token: YOUR_API_KEY
                  status: 200
                properties:
                  message:
                    type: string
                    example: authenticated
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: YOUR_API_KEY
                    required:
                      - token
                  status:
                    type: integer
                    example: 200
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'invalid credentials'
                  status: 401
                properties:
                  message:
                    type: string
                    example: 'invalid credentials'
                  status:
                    type: integer
                    example: 401
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: orn.leann@example.org
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: '6JSH`@|8&D!+fCY_?k2O'
                  nullable: false
                token_name:
                  type: string
                  description: 'The name of the API token.'
                  example: 'Dynamic API Token'
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/logout:
    delete:
      summary: Logout
      operationId: logout
      description: "Destroys the user's current API token, effectively logging them out."
      parameters: []
      responses:
        200:
          description: 'Token destroyed successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  status: 200
                properties:
                  message:
                    type: string
                    example: success
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
  /api/logout/all:
    delete:
      summary: 'Logout All'
      operationId: logoutAll
      description: "Destroys all the user's API tokens, effectively logging everyone out of the account."
      parameters: []
      responses:
        200:
          description: 'Tokens destroyed successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: success
                  status: 200
                properties:
                  message:
                    type: string
                    example: success
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
  /api/v0/mods:
    get:
      summary: 'Get Mods'
      operationId: getMods
      description: 'List, filter, and sort basic information about mods.'
      parameters:
        -
          in: query
          name: include
          description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
          example: 'users,versions,license'
          required: false
          schema:
            type: string
            description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
            example: 'users,versions,license'
            nullable: false
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by the `id`. Select multiple by separating the IDs with a comma.'
          example: '5,10,15'
          required: false
          schema:
            type: string
            description: 'Filter by the `id`. Select multiple by separating the IDs with a comma.'
            example: '5,10,15'
            nullable: false
        -
          in: query
          name: 'filter[hub_id]'
          description: 'Filter by the `hub_id` attribute. Select multiple by separating the IDs with a comma.'
          example: '20'
          required: false
          schema:
            type: string
            description: 'Filter by the `hub_id` attribute. Select multiple by separating the IDs with a comma.'
            example: '20'
            nullable: false
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by the `name` attribute. Use `*` as the wildcard character.'
          example: '*SAIN*'
          required: false
          schema:
            type: string
            description: 'Filter by the `name` attribute. Use `*` as the wildcard character.'
            example: '*SAIN*'
            nullable: false
        -
          in: query
          name: 'filter[slug]'
          description: 'Filter by the `slug` attribute. Use `*` as the wildcard character.'
          example: '*raid-times'
          required: false
          schema:
            type: string
            description: 'Filter by the `slug` attribute. Use `*` as the wildcard character.'
            example: '*raid-times'
            nullable: false
        -
          in: query
          name: 'filter[teaser]'
          description: 'Filter by the `teaser` attribute. Use `*` as the wildcard character.'
          example: '*weighted*random*times*'
          required: false
          schema:
            type: string
            description: 'Filter by the `teaser` attribute. Use `*` as the wildcard character.'
            example: '*weighted*random*times*'
            nullable: false
        -
          in: query
          name: 'filter[source_code_link]'
          description: 'Filter by the `source_code_link` attribute. Use `*` as the wildcard character.'
          example: '*https*.net*'
          required: false
          schema:
            type: string
            description: 'Filter by the `source_code_link` attribute. Use `*` as the wildcard character.'
            example: '*https*.net*'
            nullable: false
        -
          in: query
          name: 'filter[featured]'
          description: 'Filter by the `featured` attribute. All "truthy" or "falsy" values are supported.'
          example: 'true'
          required: false
          schema:
            type: boolean
            description: 'Filter by the `featured` attribute. All "truthy" or "falsy" values are supported.'
            example: 'true'
            nullable: false
        -
          in: query
          name: 'filter[contains_ads]'
          description: 'Filter by the `contains_ads` attribute. All "truthy" or "falsy" values are supported.'
          example: 'true'
          required: false
          schema:
            type: boolean
            description: 'Filter by the `contains_ads` attribute. All "truthy" or "falsy" values are supported.'
            example: 'true'
            nullable: false
        -
          in: query
          name: 'filter[contains_ai_content]'
          description: 'Filter by the `contains_ai_content` attribute. All "truthy" or "falsy" values are supported.'
          example: 'true'
          required: false
          schema:
            type: boolean
            description: 'Filter by the `contains_ai_content` attribute. All "truthy" or "falsy" values are supported.'
            example: 'true'
            nullable: false
        -
          in: query
          name: 'filter[created_at]'
          description: 'Filter by the `created_at` attribute. Ranges are possible by separating the dates with a comma.'
          example: '2023-12-31,2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by the `created_at` attribute. Ranges are possible by separating the dates with a comma.'
            example: '2023-12-31,2024-12-31'
            nullable: false
        -
          in: query
          name: 'filter[updated_at]'
          description: 'Filter by the `updated_at` attribute. Ranges are possible by separating the dates with a comma.'
          example: '2023-12-31,2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by the `updated_at` attribute. Ranges are possible by separating the dates with a comma.'
            example: '2023-12-31,2024-12-31'
            nullable: false
        -
          in: query
          name: 'filter[published_at]'
          description: 'Filter by the `published_at` attribute. Ranges are possible by seperating the dates with a comma.'
          example: '2023-12-31,2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by the `published_at` attribute. Ranges are possible by seperating the dates with a comma.'
            example: '2023-12-31,2024-12-31'
            nullable: false
        -
          in: query
          name: sort
          description: 'Sort the results by a comma seperated list of attributes. The default sort direction is ASC, append the attribute name with a minus to sort DESC.'
          example: '-featured,name'
          required: false
          schema:
            type: string
            description: 'Sort the results by a comma seperated list of attributes. The default sort direction is ASC, append the attribute name with a minus to sort DESC.'
            example: '-featured,name'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Mods
  '/api/v0/mods/{id}':
    get:
      summary: 'Get Mod'
      operationId: getMod
      description: 'Display more detailed information about a specific mod.'
      parameters:
        -
          in: query
          name: include
          description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
          example: 'users,versions,license'
          required: false
          schema:
            type: string
            description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
            example: 'users,versions,license'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Mods
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the mod.'
        example: 558
        required: true
        schema:
          type: integer
  /api/v0/users:
    get:
      summary: 'Get Users'
      operationId: getUsers
      description: 'List, filter, and sort basic information about users.'
      parameters:
        -
          in: query
          name: include
          description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
          example: user_role
          required: false
          schema:
            type: string
            description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
            example: user_role
            nullable: false
        -
          in: query
          name: 'filter[id]'
          description: 'Filter by the `id`. Select multiple by separating the IDs with a comma.'
          example: '5,10,15'
          required: false
          schema:
            type: string
            description: 'Filter by the `id`. Select multiple by separating the IDs with a comma.'
            example: '5,10,15'
            nullable: false
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by the `name` attribute. Use `*` as the wildcard character.'
          example: '*fringe'
          required: false
          schema:
            type: string
            description: 'Filter by the `name` attribute. Use `*` as the wildcard character.'
            example: '*fringe'
            nullable: false
        -
          in: query
          name: 'filter[created_at]'
          description: 'Filter by the `created_at` attribute. Ranges are possible by separating the dates with a comma.'
          example: '2023-12-31,2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by the `created_at` attribute. Ranges are possible by separating the dates with a comma.'
            example: '2023-12-31,2024-12-31'
            nullable: false
        -
          in: query
          name: 'filter[updated_at]'
          description: 'Filter by the `updated_at` attribute. Ranges are possible by separating the dates with a comma.'
          example: '2023-12-31,2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by the `updated_at` attribute. Ranges are possible by separating the dates with a comma.'
            example: '2023-12-31,2024-12-31'
            nullable: false
        -
          in: query
          name: sort
          description: 'Sort the results by a comma seperated list of attributes. The default sort direction is ASC, append the attribute name with a minus to sort DESC.'
          example: 'created_at,-name'
          required: false
          schema:
            type: string
            description: 'Sort the results by a comma seperated list of attributes. The default sort direction is ASC, append the attribute name with a minus to sort DESC.'
            example: 'created_at,-name'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Users
  '/api/v0/users/{id}':
    get:
      summary: 'Get User'
      operationId: getUser
      description: 'Display more detailed information about a specific user.'
      parameters:
        -
          in: query
          name: include
          description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
          example: user_role
          required: false
          schema:
            type: string
            description: 'The relationships to include within the `includes` key. By default no relationships are automatically included.'
            example: user_role
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Users
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
